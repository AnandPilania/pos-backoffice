{"ast":null,"code":"import axios from \"axios\";\nimport { servicePath } from \"../../constants/defaultValues\";\nimport { LOGIN_USER, LOGIN_USER_SUCCESS, LOGOUT_USER, REGISTER_USER, REGISTER_USER_SUCCESS, LOGIN_USER_ERROR, REGISTER_USER_ERROR, FORGOT_PASSWORD, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR } from '../actions';\nexport var loginUser = function loginUser(user, history) {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN_USER,\n      payload: {\n        user,\n        history\n      }\n    });\n    axios.post(servicePath + \"/auth/login\", {\n      email: user.email,\n      password: user.password\n    }).then(function (response) {\n      console.log(response);\n\n      if (response.status === 200 && response.data['message'] === \"\") {\n        var data = response.data['data'];\n        localStorage.setItem('user_token', data['api_token']);\n        dispatch({\n          type: LOGIN_USER_SUCCESS,\n          payload: data['api_token']\n        });\n        history.push('/');\n      } else {\n        var errorCode = response.data['message'];\n        dispatch({\n          type: LOGIN_USER_ERROR,\n          payload: errorCode\n        });\n      }\n    }).catch(function (error) {\n      dispatch({\n        type: LOGIN_USER_ERROR,\n        payload: error\n      });\n    });\n  };\n};\nexport var loginUserSuccess = function loginUserSuccess(user) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var loginUserError = function loginUserError(message) {\n  return {\n    type: LOGIN_USER_ERROR,\n    payload: {\n      message\n    }\n  };\n};\nexport var forgotPassword = function forgotPassword(forgotUserMail, history) {\n  return {\n    type: FORGOT_PASSWORD,\n    payload: {\n      forgotUserMail,\n      history\n    }\n  };\n};\nexport var forgotPasswordSuccess = function forgotPasswordSuccess(forgotUserMail) {\n  return {\n    type: FORGOT_PASSWORD_SUCCESS,\n    payload: forgotUserMail\n  };\n};\nexport var forgotPasswordError = function forgotPasswordError(message) {\n  return {\n    type: FORGOT_PASSWORD_ERROR,\n    payload: {\n      message\n    }\n  };\n};\nexport var resetPassword = function resetPassword(_ref) {\n  var resetPasswordCode = _ref.resetPasswordCode,\n      newPassword = _ref.newPassword,\n      history = _ref.history;\n  return {\n    type: RESET_PASSWORD,\n    payload: {\n      resetPasswordCode,\n      newPassword,\n      history\n    }\n  };\n};\nexport var resetPasswordSuccess = function resetPasswordSuccess(newPassword) {\n  return {\n    type: RESET_PASSWORD_SUCCESS,\n    payload: newPassword\n  };\n};\nexport var resetPasswordError = function resetPasswordError(message) {\n  return {\n    type: RESET_PASSWORD_ERROR,\n    payload: {\n      message\n    }\n  };\n};\nexport var registerUser = function registerUser(user, history) {\n  return {\n    type: REGISTER_USER,\n    payload: {\n      user,\n      history\n    }\n  };\n};\nexport var registerUserSuccess = function registerUserSuccess(user) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var registerUserError = function registerUserError(message) {\n  return {\n    type: REGISTER_USER_ERROR,\n    payload: {\n      message\n    }\n  };\n};\nexport var logoutUser = function logoutUser(history) {\n  return {\n    type: LOGOUT_USER,\n    payload: {\n      history\n    }\n  };\n};","map":{"version":3,"sources":["/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/src/redux/auth/actions.js"],"names":["axios","servicePath","LOGIN_USER","LOGIN_USER_SUCCESS","LOGOUT_USER","REGISTER_USER","REGISTER_USER_SUCCESS","LOGIN_USER_ERROR","REGISTER_USER_ERROR","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","loginUser","user","history","dispatch","type","payload","post","email","password","then","response","console","log","status","data","localStorage","setItem","push","errorCode","catch","error","loginUserSuccess","loginUserError","message","forgotPassword","forgotUserMail","forgotPasswordSuccess","forgotPasswordError","resetPassword","resetPasswordCode","newPassword","resetPasswordSuccess","resetPasswordError","registerUser","registerUserSuccess","registerUserError","logoutUser"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {servicePath} from \"../../constants/defaultValues\";\r\n\r\nimport {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    REGISTER_USER_ERROR,\r\n    FORGOT_PASSWORD,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_ERROR,\r\n    RESET_PASSWORD,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_ERROR\r\n} from '../actions';\r\n\r\nexport const loginUser = (user, history) => dispatch => {\r\n\r\n    dispatch({\r\n        type: LOGIN_USER,\r\n        payload: { user, history }\r\n    });\r\n\r\n    axios.post(servicePath + \"/auth/login\", {\r\n        email: user.email,\r\n        password: user.password\r\n    }).then(response => {\r\n        console.log(response);\r\n        if (response.status === 200 && response.data['message'] === \"\") {\r\n            const data = response.data['data'];\r\n            localStorage.setItem('user_token', data['api_token']);\r\n            dispatch({\r\n                type: LOGIN_USER_SUCCESS,\r\n                payload: data['api_token']\r\n            });\r\n            history.push('/');\r\n        } else {\r\n            const errorCode = response.data['message'];\r\n            dispatch({\r\n                type: LOGIN_USER_ERROR,\r\n                payload: errorCode\r\n            });\r\n        }\r\n\r\n    }).catch(error => {\r\n        dispatch({\r\n            type: LOGIN_USER_ERROR,\r\n            payload: error\r\n        });\r\n    });\r\n};\r\nexport const loginUserSuccess = (user) => ({\r\n    type: LOGIN_USER_SUCCESS,\r\n    payload: user\r\n});\r\nexport const loginUserError = (message) => ({\r\n    type: LOGIN_USER_ERROR,\r\n    payload: {message}\r\n});\r\n\r\nexport const forgotPassword = (forgotUserMail, history) => ({\r\n    type: FORGOT_PASSWORD,\r\n    payload: {forgotUserMail, history}\r\n});\r\nexport const forgotPasswordSuccess = (forgotUserMail) => ({\r\n    type: FORGOT_PASSWORD_SUCCESS,\r\n    payload: forgotUserMail\r\n});\r\nexport const forgotPasswordError = (message) => ({\r\n    type: FORGOT_PASSWORD_ERROR,\r\n    payload: {message}\r\n});\r\n\r\nexport const resetPassword = ({resetPasswordCode, newPassword, history}) => ({\r\n    type: RESET_PASSWORD,\r\n    payload: {resetPasswordCode, newPassword, history}\r\n});\r\nexport const resetPasswordSuccess = (newPassword) => ({\r\n    type: RESET_PASSWORD_SUCCESS,\r\n    payload: newPassword\r\n});\r\nexport const resetPasswordError = (message) => ({\r\n    type: RESET_PASSWORD_ERROR,\r\n    payload: {message}\r\n});\r\n\r\n\r\nexport const registerUser = (user, history) => ({\r\n    type: REGISTER_USER,\r\n    payload: {user, history}\r\n})\r\nexport const registerUserSuccess = (user) => ({\r\n    type: REGISTER_USER_SUCCESS,\r\n    payload: user\r\n})\r\nexport const registerUserError = (message) => ({\r\n    type: REGISTER_USER_ERROR,\r\n    payload: {message}\r\n})\r\n\r\nexport const logoutUser = (history) => ({\r\n    type: LOGOUT_USER,\r\n    payload: {history}\r\n});"]},"metadata":{},"sourceType":"module"}