{"ast":null,"code":"import _classCallCheck from \"/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/src/views/products/categories/edit.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Row, Card, CardBody, Label, Input, FormGroup, Button } from \"reactstrap\";\nimport IntlMessages from \"../../../helpers/IntlMessages\";\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\nimport axios from \"axios\";\nimport { servicePath, tokenPrefix } from \"../../../constants/defaultValues\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport errorMessage from \"../../../constants/errorMessages\";\nimport { connect } from \"react-redux\";\nimport ImageUploader from \"react-images-upload\";\nimport CustomSelectInput from \"../../../components/common/CustomSelectInput\";\nimport Select from \"react-select\";\nimport { injectIntl } from \"react-intl\";\n\nvar CategoryEdit = /*#__PURE__*/function (_Component) {\n  _inherits(CategoryEdit, _Component);\n\n  var _super = _createSuper(CategoryEdit);\n\n  function CategoryEdit(props) {\n    var _this;\n\n    _classCallCheck(this, CategoryEdit);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (e) {\n      _this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    _this.handleStateChange = function (state) {\n      _this.setState({\n        state\n      });\n    };\n\n    _this.onSubmit = function () {\n      var _this$state = _this.state,\n          loading = _this$state.loading,\n          uploading = _this$state.uploading,\n          name = _this$state.name,\n          state = _this$state.state;\n\n      if (!loading && !uploading) {\n        var data = new FormData();\n        data.append('id', _this.props.match.params.categoryId);\n        data.append('name', name);\n        data.append('state', state.value);\n\n        _this.setState({\n          uploading: true\n        });\n\n        axios.post(servicePath + \"/categories/update\", data, {\n          headers: {\n            'X-API-TOKEN': tokenPrefix + _this.props.apiToken\n          }\n        }).then(function (response) {\n          _this.setState({\n            uploading: false\n          });\n\n          if (response.status === 200 && response.data['message'] === \"\") {\n            NotificationManager.success(\"Category Successfully Updated\", \"Success\", 3000, null, null, '');\n          } else {\n            var errorCode = response.data['message'];\n            NotificationManager.warning(errorMessage[errorCode], \"Error\", 3000, null, null, '');\n          }\n        }).catch(function (error) {\n          _this.setState({\n            uploading: false\n          });\n\n          NotificationManager.warning(error, \"Error\", 3000, null, null, '');\n        });\n      }\n    };\n\n    _this.state = {\n      loading: false,\n      uploading: false\n    };\n    return _this;\n  }\n\n  _createClass(CategoryEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        loading: true\n      });\n      axios.get(servicePath + \"/categories/get\", {\n        params: {\n          categoryId: this.props.match.params.categoryId\n        },\n        headers: {\n          'X-API-TOKEN': tokenPrefix + this.props.apiToken\n        }\n      }).then(function (response) {\n        return response['data'];\n      }).then(function (data) {\n        if (data['message'] === \"\") {\n          _this2.setState({\n            loading: false,\n            name: data['data']['category']['name'],\n            state: data['data']['category']['show_flag'] === 1 ? {\n              'label': _this2.props.intl.messages['pages.active'],\n              'value': 1\n            } : {\n              'label': _this2.props.intl.messages['pages.inactive'],\n              'value': 0\n            }\n          });\n        } else {\n          _this2.props.history.push('/products/categories');\n        }\n      }).catch(function (error) {\n        _this2.props.history.push('/products/categories');\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          loading = _this$state2.loading,\n          uploading = _this$state2.uploading,\n          name = _this$state2.name,\n          state = _this$state2.state;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Colxx, {\n        xxs: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Breadcrumb, {\n        heading: \"menu.category-edit\",\n        match: this.props.match,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Separator, {\n        className: \"mb-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Colxx, {\n        xxs: \"12\",\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }\n      }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 39\n        }\n      }) : /*#__PURE__*/React.createElement(Card, {\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Colxx, {\n        xxs: \"12\",\n        xl: \"8\",\n        className: \"col-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 53\n        }\n      }, \"Category Name\"), /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: name,\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: \"state\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 53\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(Select, {\n        id: \"state\",\n        components: {\n          Input: CustomSelectInput\n        },\n        className: \"react-select\",\n        classNamePrefix: \"react-select\",\n        onChange: this.handleStateChange,\n        value: state,\n        options: [{\n          'label': this.props.intl.messages['pages.active'],\n          'value': 1\n        }, {\n          'label': this.props.intl.messages['pages.inactive'],\n          'value': 0\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 53\n        }\n      })))), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.onSubmit,\n        color: \"primary\",\n        className: \"btn-shadow btn-multiple-state \".concat(uploading ? \"show-spinner\" : \"\"),\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"spinner d-inline-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bounce1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bounce2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bounce3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 43\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"pages.save\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 69\n        }\n      }))))))));\n    }\n  }]);\n\n  return CategoryEdit;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var authUser = _ref.authUser;\n  var apiToken = authUser.token;\n  return {\n    apiToken\n  };\n};\n\nexport default injectIntl(connect(mapStateToProps, {})(CategoryEdit));","map":{"version":3,"sources":["/Volumes/DATA/project/20200412_POSbackoffice_django_react/project/POS-backoffice/frontend/src/views/products/categories/edit.js"],"names":["React","Component","Fragment","Row","Card","CardBody","Label","Input","FormGroup","Button","IntlMessages","Colxx","Separator","Breadcrumb","axios","servicePath","tokenPrefix","NotificationManager","errorMessage","connect","ImageUploader","CustomSelectInput","Select","injectIntl","CategoryEdit","props","onChange","e","setState","target","name","value","handleStateChange","state","onSubmit","loading","uploading","data","FormData","append","match","params","categoryId","post","headers","apiToken","then","response","status","success","errorCode","warning","catch","error","get","intl","messages","history","push","mapStateToProps","authUser","token"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport {Row, Card, CardBody, Label, Input, FormGroup, Button} from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport {Colxx, Separator} from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport axios from \"axios\";\r\nimport {servicePath, tokenPrefix} from \"../../../constants/defaultValues\";\r\nimport {NotificationManager} from \"../../../components/common/react-notifications\";\r\nimport errorMessage from \"../../../constants/errorMessages\";\r\nimport {connect} from \"react-redux\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport CustomSelectInput from \"../../../components/common/CustomSelectInput\";\r\nimport Select from \"react-select\";\r\nimport {injectIntl} from \"react-intl\";\r\n\r\nclass CategoryEdit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            uploading: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loading: true});\r\n        axios\r\n            .get(servicePath + \"/categories/get\", {\r\n                params: {\r\n                    categoryId: this.props.match.params.categoryId,\r\n                },\r\n                headers: {\r\n                    'X-API-TOKEN': tokenPrefix + this.props.apiToken\r\n                }\r\n            })\r\n            .then(response => response['data'])\r\n            .then(data => {\r\n                if (data['message'] === \"\") {\r\n                    this.setState({\r\n                        loading: false,\r\n                        name: data['data']['category']['name'],\r\n                        state: data['data']['category']['show_flag'] === 1 ?\r\n                            {'label': this.props.intl.messages['pages.active'], 'value': 1} :\r\n                            {'label': this.props.intl.messages['pages.inactive'], 'value': 0}\r\n                    });\r\n                } else {\r\n                    this.props.history.push('/products/categories');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.props.history.push('/products/categories');\r\n            });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    handleStateChange = state => {\r\n        this.setState({state});\r\n    }\r\n\r\n    onSubmit = () => {\r\n        const {loading, uploading, name, state} = this.state;\r\n\r\n        if (!loading && !uploading) {\r\n\r\n            const data = new FormData();\r\n            data.append('id', this.props.match.params.categoryId);\r\n            data.append('name', name);\r\n            data.append('state', state.value);\r\n\r\n            this.setState({uploading: true});\r\n\r\n            axios\r\n                .post(servicePath + \"/categories/update\", data, {\r\n                    headers: {\r\n                        'X-API-TOKEN': tokenPrefix + this.props.apiToken\r\n                    }\r\n                })\r\n                .then(response => {\r\n                    this.setState({\r\n                        uploading: false\r\n                    });\r\n                    if (response.status === 200 && response.data['message'] === \"\") {\r\n                        NotificationManager.success(\r\n                            \"Category Successfully Updated\",\r\n                            \"Success\",\r\n                            3000,\r\n                            null,\r\n                            null,\r\n                            ''\r\n                        );\r\n                    } else {\r\n                        const errorCode = response.data['message'];\r\n                        NotificationManager.warning(\r\n                            errorMessage[errorCode],\r\n                            \"Error\",\r\n                            3000,\r\n                            null,\r\n                            null,\r\n                            ''\r\n                        );\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        uploading: false\r\n                    });\r\n                    NotificationManager.warning(\r\n                        error,\r\n                        \"Error\",\r\n                        3000,\r\n                        null,\r\n                        null,\r\n                        ''\r\n                    );\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            loading,\r\n            uploading,\r\n            name,\r\n            state,\r\n        } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <Breadcrumb heading=\"menu.category-edit\" match={this.props.match}/>\r\n                        <Separator className=\"mb-5\"/>\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Colxx xxs=\"12\" className=\"mb-4\">\r\n                        {\r\n                            loading ? <div className=\"loading\"/> :\r\n\r\n                                <Card className=\"mb-4\">\r\n                                    <CardBody>\r\n                                        <Row>\r\n                                            <Colxx xxs=\"12\" xl=\"8\" className=\"col-left\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"name\">Category Name</Label>\r\n                                                    <Input type=\"text\" id=\"name\" name=\"name\" value={name}\r\n                                                           onChange={this.onChange}/>\r\n                                                </FormGroup>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"state\">State</Label>\r\n                                                    <Select\r\n                                                        id=\"state\"\r\n                                                        components={{Input: CustomSelectInput}}\r\n                                                        className=\"react-select\"\r\n                                                        classNamePrefix=\"react-select\"\r\n                                                        onChange={this.handleStateChange}\r\n                                                        value={state}\r\n                                                        options={[\r\n                                                            {\r\n                                                                'label': this.props.intl.messages['pages.active'],\r\n                                                                'value': 1\r\n                                                            },\r\n                                                            {\r\n                                                                'label': this.props.intl.messages['pages.inactive'],\r\n                                                                'value': 0\r\n                                                            }\r\n                                                        ]}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </Colxx>\r\n                                        </Row>\r\n                                        <Button\r\n                                            onClick={this.onSubmit}\r\n                                            color=\"primary\"\r\n                                            className={`btn-shadow btn-multiple-state ${uploading ? \"show-spinner\" : \"\"}`}\r\n                                            size=\"lg\"\r\n                                        >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                          <span className=\"bounce1\"/>\r\n                                          <span className=\"bounce2\"/>\r\n                                          <span className=\"bounce3\"/>\r\n                                        </span>\r\n                                            <span className=\"label\"><IntlMessages id=\"pages.save\"/></span>\r\n                                        </Button>\r\n                                    </CardBody>\r\n                                </Card>\r\n                        }\r\n                    </Colxx>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({authUser}) => {\r\n    const {token: apiToken} = authUser;\r\n    return {apiToken};\r\n};\r\n\r\nexport default injectIntl(\r\n    connect(\r\n        mapStateToProps,\r\n        {}\r\n    )(CategoryEdit)\r\n);"]},"metadata":{},"sourceType":"module"}